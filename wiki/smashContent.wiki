#summary Saved content formats
#labels Game-SSBB,Platform-Wii,Featured,Type-FileFormat

=Table of Contents=
<wiki:toc max_depth="3" />


= Content Header =


== Format ==
Saved content header;
Header size: 0x20 (32 bytes)

Saved content must be decrypted using a special Brawl key for the first portion of the header, and the SD key for the remaining portion of the file.
{{{
0x00 (8)		//Wii ID - Same as "Wii Number" in Address Book (not necessary)
0x08 (8)		//Wii System Date/Time (not necessary)
0x10 (4)	!	//Checksum
0x14 (1)		//Region
	0x00 = JAP;
	0x21 = USA;
	0x44 = EUR;
0x15 (1) 	!	//Content Type
	0x01 = Snapshot;
	0x02 = Replay;
	0x03 = Stage;
0x16 (1)		//Save Type
	0x00 = Standard;
	0x01 = Unknown;
	0x02 = Official Download;
	0x03 = savesample;
0x17 (1)	!	// Must be 0xDB (possibly to do with checksum; DB stand for DeadBeef)
0x18 (4)	!	//Uncompressed Size
0x1C (4)	!	//Current Size
}}}
! = Required Fields; Others can all be 0x00, other values untested.

Data follows directly After


==File Names ==

  * Default file name for content is "xx_yymmdd_hhmm.bin".
  * Tests show that the file can be named anything, as long as it is named {{{xx_<name>.bin}}}
  * File name can be a maximum of 64 characters.
  * Characters must be valid, range is 0x20 to 0x7F. (32 to 127). Reason to believe that each character is read as a signed 8-bit integer. Characters less than 0x20 may be possible, but not using Windows Exploder.


==Compression==

  * If uncompressed size is not equal to current size, the data is compressed, otherwise it is uncompressed.
  * If the data is compressed; It was have a common LZ format header. If it has been uncompressed, delete that header completely.

==Checksum Calculation==

  # Replace the checksum field with 0xDEADBEEF
  # Calculate the file's checksum using crc32 from position 0x00 to (current size + 32)
  # Replace the checksum field with the new checksum.


==Alignment==

  * Before re-encrypting the file, append any bytes until the file is aligned to 0x10.



= Replay =

== Format ==
{{{
0x00 - ASCII "PR05"
0x04 - Unknown
0x08 - Unknown (2)
0x0A - Unknown (2)
0x0C - [Pointer]
0x10 - Size of Action Data
0x14 - Unknown(additional size?)
0x18 - Unknown (0xFF 01 00 00; 00 00 00 00)
0x1C - Unknown
0x20 - Match Rules (8) (90180F08)
	Byte 1:
		0x04 - Match is a Tournament/Single Event/Practice
		0x08 - Match is a Single Event/Multi-Man
		0x10 - Single Player Match (Classic/Event/Practice)
		0x20 - Stadium/Practice Game
	Byte 2:
		0x01 - Timer counts up
		0x02 - Score Match?
		0x04 - BTT/Adventure
		0x08 - Single Player
		0x10 - Unknown(Always checked?)
		0x20 - Stock Match?
		0x40 - Coin Match
	Byte 3:
		0x01 - Team Attack
		0x02 - Timer counts up
		0x10 - HRC
		0x80 - Match is Timed
	Byte 4:
		0x02 - Hide the damage gauge
		0x04 - Adventure
		0x08 - Allow pausing
		0x20 - HP-based Match
	Byte 5: 
		0x01 - Match is BTT
		0x08 - Fixed Camera
		0x10 - Angled Camera
		0x80 - Dont use score
	Byte 6:
		0x20 - Players???
	Byte 7:
		0x20 - Difficulty (3 bits)
	Byte 8:
0x28 - Unknown (Event match use) (00000001 = practice)
0x2C - Stadium Type (1) [00 = HRC; 03 = BTT; 05 = 10-Man; 06 = 100-man; 07 = 3-Minute; 08 = 15-Minute; 09 = Endless; 0A = Cruel]
0x2D - Unknown 
0x2E - Item Switch (0 = None, 1 = Low, 2 = Med, 3 = High)
0x2F - Unknown (0xFF)
0x30 - Unknown (??)
0x33 - Stage ID (1) [See BrawlStageID.txt]
0x34 - Stage Sub-ID [Difficulty] (1)
0x35 - Unknown
0x38 - Match Time (4) [0 for infinite]
0x3C - Unknown
0x40 - Unknown
0x44 - Unknown
0x48 - Item Switches (8)
	Byte 1:
		Unused
	Byte 2:
		0x01 - Screw Attack
		0x02 - Cds, Trophies, Stickers
		0x04 - Cds, Trophies, Stickers
		0x08 - Cds, Trophies, Stickers
		0x10 - Unused
		0x20 - Unused
		0x40 - Unused
		0x80 - Unused
	Byte 3:
		0x01 - Green Shell
		0x02 - Banana Peel
		0x04 - Bumper
		0x08 - Spring
		0x10 - Unira
		0x20 - Soccer Ball
		0x40 - Team Healer (Only in team games)
		0x80 - Franklin Badge
	Byte 4:
		0x01 - Gooey Bomb
		0x02 - Smart Bomb
		0x04 - Deku Nut
		0x08 - Freezie
		0x10 - Smoke Ball
		0x20 - Pitfall
		0x40 - Hothead
		0x80 - Mr. Saturn
	Byte 5:
		0x01 - Hammer
		0x02 - Golden Hammer
		0x04 - Super Scope
		0x08 - Ray Gun
		0x10 - Fire Flower
		0x20 - Cracker Launcher
		0x40 - Bob-Omb
		0x80 - Motion Sensor Bomb
	Byte 6:
		0x01 - Superspice Curry
		0x02 - Timer
		0x04 - Lightning
		0x08 - Beam Sword
		0x10 - Home-Run Bat
		0x20 - Fan
		0x40 - Lips Stick
		0x80 - Star Rod
	Byte 7:
		0x01 - Heart Container
		0x02 - Dragoon Parts
		0x04 - Super Mushroom
		0x08 - Poison Mushroom
		0x10 - Warp Star
		0x20 - Starman
		0x40 - Metal Box
		0x80 - Bunny Hood
	Byte 8:
		0x01 - Smash Ball
		0x02 - Assist Trophy
		0x04 - Pokeball
		0x08 - Containers
		0x10 - Blast Box
		0x20 - Sandbag
		0x40 - Food
		0x80 - Maximum Tomato
0x50 - Pokemon Switches (4)
	Byte 1:
		0x01 - Togepi
		0x02 - Goldeen
		0x04 - Gardevoir
		0x08 - Wobuffet
		0x10 - Suicune
		0x20 - Bonsly
		0x40 - Unused
		0x80 - Unused
	Byte 2:
		0x01 - Lugia
		0x02 - Manaphy
		0x04 - Weavile
		0x08 - Electrode
		0x10 - Metagross
		0x20 - Mew
		0x40 - Meowth
		0x80 - Piplup
	Byte 3:
		0x01 - Gulpin
		0x02 - Staryu
		0x04 - Ho-Oh
		0x08 - Jirachi
		0x10 - Snorlax
		0x20 - Bellossom
		0x40 - Kyogre
		0x80 - Latias/Latios
	Byte 4:
		0x01 - Torchic
		0x02 - Cerebi
		0x04 - Chickorita
		0x08 - Entei
		0x10 - Moltres
		0x20 - Munchlax
		0x40 - Deoxys
		0x80 - Groudon
0x54 - Assist Trophy Switches (4)
	Byte 1:
		0x01 - Tingle
		0x02 - Waluigi
		0x04 - Dr. Wright
		0x08 - Unused
		0x10 - Unused
		0x20 - Unused
		0x40 - Unused
		0x80 - Unused
	Byte 2:
		0x01 - Metroid
		0x02 - Nintendog
		0x04 - Mr. Resetti
		0x08 - Isaac
		0x10 - Saki Amamiya
		0x20 - Shadow the Hedgehog
		0x40 - Stafy
		0x80 - Infantry+Tanks
	Byte 3:
		0x01 - Lakitu
		0x02 - Knuckle Joe
		0x04 - Hammer Bro.
		0x08 - Helirin
		0x10 - Kat & Ana
		0x20 - Jill & Drill Dozer
		0x40 - Lyn
		0x80 - Little Mac
	Byte 4:
		0x01 - Andross
		0x02 - Barbara
		0x04 - Gray Fox
		0x08 - Ray MKII (Custom Robo)
		0x10 - Samurai Goroh
		0x20 - Devil
		0x40 - Excitebike
		0x80 - Jeff

0x58 - Random Stage Switches (Brawl) [Section is completely Unused] (4)
	Byte 1:
	Byte 2:
	Byte 3:
	Byte 4:

0x5C - Random Stage Switches (Melee) [Section is completely Unused] (4)
	Byte 1:
		Unused
	Byte 2:
		0x04 - Unused
		0x08 - Unused
		0x10 - Unused
		0x20 - Unused
		0x40 - Unused
		0x80 - Unused
	Byte 3:
	Byte 4:

0x60 - Unknown (Float)
0x64 - Global Damage Ratio
0x68 - Global Speed Ratio
0x6C - Random Seed
0x70 - Unknown (01 00 00 00)
0x74 - Unknown (01 00; FF 00)
0x76 - Music ID (2) [See musicSFX_ID.txt]
0x78 - Unknown (Float?Flags?)

	Unknown

0x98 - 0xFFFFFFFF (event); 0x00000000(adventure); 0x002D005A(classic)

	Unknown

0xB0 - Character 1 (92) >----+
0x10C - Character 2 (92) >---|
0x168 - Character 3 (92) >---|
0x1C4 - Character 4 (92) >---|
0x220 - Character 5 (92) >---|
0x27C - Character 6 (92) >---|
0x2D8 - Character 7 (92) >---+----------------------+
0x334 - Unknown					    |
0x338 - Unknown					    |
0x33C - Pointer to Stage Data (2)		    |
0x33E - Size of Stage Data (2)			    |
0x340 - Pointer to Action data (4)		    |
0x344 - Size of Action data (4)			    |
0x348 - # of actions (2)			    |
	Unknown					    |
0x37F - Last byte for this section		    |
						    |
						    |
    +-----------------------------------------------+
    |
    +--> Character Structure (92 bytes[0x5C]):
		+0x00 - Character ID [See BrawlCharID.txt]
		+0x01 - Character Controller
			0x00 = Human
			0x01 = CPU
			0x03 = Unused
		+0x02 - Character spawn point ? player #
		+0x03 - Character spawn point ? player #
		+0x04 - Stock (FF = infinite)
		+0x05 - Colour
		+0x06 - Portrait
		+0x07 - Unknown (01)
		+0x08 - Character spawn point ? player #
		+0x09 - Unknown
		+0x0A - Overlay (04=dark)
		+0x0B - Team
		+0x0C - Character Name (16-bit unicode; null terminated; 6 characters max)
		+0x18 - Character Flags (7)
			Byte 1:
				0x08 - Always checked
				0x10 - Always checked
				0x20 - Always checked
				0x40 - Always checked
			Byte 2:
				0x08 - Always checked (multi)
				0x10 - Always checked (multi)
				0x20 - Always checked (multi)
				0x40 - Always checked (multi)
			Byte 3:
		+0x1B	Byte 4:
				0x04 - Is Clear
				0x10 - Is Metal
				0x40 - Rumble on
				0x80 - Fighting Alloy
			Byte 5:
				0x01 - Has Franklin Badge
				0x02 - Has Superspice Curry
				0x04 - Has Flower (Lips Stick)
				0x08 - Has Bunny Hood
				0x10 - Unknown (Always checked)
				0x20 - Character is named
				0x40 - Unknown
				0x80 - HP enabled
		+0x1D - Unknown
		+0x1E - CPU AI (00:None; 01:Stand; 02:Walk; 03:Jump; 04:run; 05:Event AI(inf final smash run); 07:Event AI(visitor to Flatzone); 0E:Attack; 19: Control;)
		+0x1F - CPU Level (%)		0x15(21) = lvl 3
		+0x20 - Damage (%) (4)
		+0x24 - HP (2)
		+0x26 -  (Adventure)
		+0x28 -  (Adventure)
		+0x2A -  (Adventure)
		+0x2C -  (Adventure)
		+0x2E -  (Adventure)
		+0x30 - Damage Receive/Stun Ratio (float)
		+0x34 - Attack Ratio (4)
		+0x38 - Defence Ratio (4)
		+0x3C - Unknown Character Flags??? (3) (human?: 0x00 01 80; cpu: 0x00 05 80;00 00 80)
		+0x3F - Character spawn point ? player #
		+0x40 - Size Ratio (4)
		+0x44 - Unknown (float)
		+0x48 - Weight Ratio (4)
		+0x4C - Unknown
		+0x50 - Unknown
		+0x54 - Unknown (float)
		+0x58 - Unknown
}}}

== Action Data ==

=== Header ===
1-byte Header (flags)
  * 0x01 - Player 1
  * 0x02 - Player 2
  * 0x04 - Player 3
  * 0x08 - Player 4
  * 0x10 - Unknown (+4)
  * 0x20 - Unknown (+8)
  * 0x40 - Unknown/Unused
  * 0x80 - Unknown

Then there are 4 bytes allocated for each player specified in the header.

===Byte 1===
{{{
	0x01 - ATTACK
	0x02 - 
	0x04 - D-Pad UP
	0x08 - D-Pad Right/Left
	0x10 - D-Pad Down
	0x20 - D-Pad Left
	0x40 - D-Pad Right
	0x80 - 
}}}

===Byte 2===
{{{
	0x01 - ATTACK
	0x02 - SPECIAL
	0x04 - JUMP
	0x08 - SHIELD
	0x10 - 
	0x20 - SMASH (C-Stick used)
	0x40 - Alternate 1
	0x80 - Alternate 2
}}}

===Byte 3===
{{{
	X-Movement (signed %)
}}}

===Byte 4===
{{{
	Y-Movement (signed %)
}}}



=Custom Stage=

==Format==

Format excludes saved content header.

{{{
0x00 - Unknown[4]
0x04 - Unknown[4]
0x0A - Stage Description
	Maximum of 20 characters. Unicode 16-bit formatting. Can be null terminated.

0x32 - Unknown[2]

---------------

0x00 - ASCII: "ED01"
0x04 - Section Size
0x08 - Pointer to JPEG data (relative to section start)
0x0C - Size of JPEG data
0x10 - Unknown/Unused
0x14 - Stage Style
	00 - Nature
	01 - Factory
	02 - Remains
0x15 - Stage Size
	00 - Small (10 block width)
	01 - Medium (14 block width)
	02 - Large (18 block width)
0x16 - Number of Blocks contained (1)
0x17 - Image Format [00 = standard; 01 = widescreen] (1)
0x18 - Music ID (2)
	See musicSFX_ID.txt

0x1A - Unknown (2)
0x1C - Stage name
	Maximum of 16 characters. Unicode 16-bit formatting. Can be null terminated.

0x3C - Unknown (4)

0x40 - Start p1 X (float)
0x44 - Start p1 Y (float)
0x48 - Start p2 X (float)
0x4C - Start p2 Y (float)
0x50 - Start p3 X (float)
0x54 - Start p3 Y (float)
0x58 - Start p4 X (float)
0x5C - Start p4 Y (float)
0x60 - Start p5 X (float)
0x64 - Start p5 Y (float)
0x68 - Start p6 X (float)
0x6C - Start p6 Y (float)
0x70 - Start p7 X (float)
0x74 - Start p7 Y (float)

0x78 - Padding? (possibly additional/respawn x/y)
0x7C - Padding?

0x80 - Blocks (Can place up to 252 of any block, regardless of type/size/location)
	See "StageValue.txt" for default values.

	Byte 1: Tile position (no X/Y, just position as if a single dimension ex: if the width is 12 and you want to place it in the second row, then this byte is 0x12[18], since it is read always as an internal width of 18)
		X = byte % 18, Y = byte / 18  (Always 18 on all stage sizes)

	Byte 2: Tile Sizes
		11100000 	- Size X
		00011100 	- Size Y
		000000111	- Smallest X

	Byte 3: Tile ID
		01110000	- Smallest Y
		00001100	- Tile group (0x00 = Basic, 0x01 = Deco[unused], 0x02 = Fixed, 0x03 = Gimmick)
		00000011 11	- Tile ID

	Byte 4: Tile Flags
		00100000 	- Flipped Flag; 1 = Flipped, 0 = Not
		00011000	- Sub-Value (Spring jump height)
		00000111	- Extension (big red field of shit surrounding block, 0x00 = none, 0x02 = +1 to sides+top, 0x03 = +1 to top+bottom, 0x05 = +1 to top)


Tile ID
BASIC TILES (0x00)
	0x00 - Debug Block ( *_BASIC_00) [unused, invalid piece]
	0x01 - Normal Platform ( *_BASIC_01)
	0x02 - Sloping Platform ( *_BASIC_02)
	0x03 - Tiny Platform ( *_BASIC_03)
	0x04 - Staircase top ( *_BASIC_04) [unused, valid piece]
	0x05 - Square Block ( *_BASIC_05)
	0x06 - Sloping Staircase ( *_BASIC_06)
	0x07 - 45 Degree Slope  ( *_BASIC_07)
	0x08 - *_BASIC_08 [unused]
	0x09 - Horizontally dominent slope ( *_BASIC_09)
	0x0A - *_BASIC_10 [unused]
	0x0B - *_BASIC_11 [unused]
	0x0C - *_BASIC_12 [unused]
	0x0D - *_BASIC_13 [unused]
	0x0E - *_BASIC_14 [unused]
	0x0F - *_BASIC_15 [unused]

FIXED TILES (0x02)
	0x00 - *_FIX_00 [unused]
	0x01 - *_FIX_01 [unused]
	0x02 - *_FIX_02 (Factory, Nature, Remains)
	0x03 - *_FIX_03 (Factory, Nature)
	0x04 - *_FIX_04 (Factory, Nature, Remains)
	0x05 - *_FIX_05 (Remains)
	0x06 - *_FIX_06 (Factory, Remains)
	0x07 - *_FIX_07 [unused]
	0x08 - *_FIX_08 (Factory, Nature, Remains)
	0x09 - *_FIX_09 (Factory, Remains)
	0x0A - *_FIX_10 (Nature)
	0x0B - *_FIX_11 (Nature, Remains)
	0x0C - *_FIX_12 (Factory, Nature, Remains)
	0x0D - *_FIX_13 (Factory, Nature)
	0x0E - *_FIX_14 [unused]
	0x0F - *_FIX_15 [unused]

GIMMICK TILES (0x03)
	0x00 - GIMMICK_00 [unused]
	0x01 - Vertical Moving Platform (GIMMICK_01)
	0x02 - Horizontal Moving Platform (GIMMICK_02)
	0x03 - Platform Wheel (GIMMICK_03)
	0x04 - Spring (GIMMICK_04)
	0x05 - Ice Block (GIMMICK_05)
	0x06 - Falling Block (GIMMICK_06)
	0x07 - Conveyor Belt (GIMMICK_07)
	0x08 - Spikes (GIMMICK_08)
	0x09 - Ladder (GIMMICK_09)
	0x0A - GIMMICK_10 [unused]
	0x0B - GIMMICK_11 [unused]
	0x0C - GIMMICK_12 [unused]
	0x0D - GIMMICK_13 [unused]
	0x0E - GIMMICK_14 [unused]
	0x0F - GIMMICK_15 [unused]
}}}

==Moving Platform Analysis==
	A moving platform's location at the start of the game is related to the position it is placed in the stage builder.

	A vertical moving platform of any size, starting at coordinate 0x00 [(0,0) see block position rules] will start at the center moving downwards(default, not flipped). The next one placed at 0x01 will start in the next "frame" of the animation. It takes 10 blocks to complete one animation cycle. The 10th block, 0x0A, will start over again, in the center moving downwards.

	A horizontal moving platform of any size, starting at coordinate 0x00 will start at the center and move left(not flipped). The next one placed at 0x01 will start in the next "frame" of the animation. It takes 6 blocks to complete one animation cycle. The 6th block, 0x06, will start over again, in the center moving left.

	One animation cycle will take place in the same set time, regardless of size. So larger moving platforms move faster than smaller ones.


==The Stage Builder limit bar==
	stageConstants provides a limit value for each block and its size. When the limit is reached, the Stage Builder doesn't allow placement of any more blocks. The limit is 8000.


==Actual Part Sizes==
	The actual sizes of the parts can be determined by the following formulae:
{{{
	defaultSmallestSize / SmallestSize * currentSize = finalSize

	rsx/rsy = real smallest size x/y
	sx/sy = smallest size x/y

	rsx/sx*x
	rsy/sy*y
}}}
	These rules only apply if x OR y is greater than or equal to the respective x/y values for the large size object, otherwise the object will be centered in its x/y, instead of stretching.


==Starting Positions==
	The starting position X and Y are float values, with 2.0 = 1 block. The value is signed and starts with the exact center of the stage.

	So 0.0 would be the direct center of your stage, and -8.0 would be 4 blocks to the left of the center.


==Preview==
	The stage preview image is not required. If it is omitted, the stage will appear to have a garbage preview.